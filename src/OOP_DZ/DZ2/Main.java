package OOP_DZ.DZ2;

import OOP_DZ.DZ2.Clases.*;

import java.time.LocalDate;

/*
На языке Java реализовать интерфейс "Животное" со следующими полями:
1.Рост животного
2.Вес животного
3.Цвет глаз животного
И методы:
1.Издать звук
2.Напечатать информацию о животном
Так же реализовать следующие интерфейсы, реализующие интерфейс Животное:
1.Домашнее животное со следующими свойствами:
1.1 Кличка
1.2 Порода
1.3 Наличие прививок
1.4 Цвет шерсти
1.5 Дата рождения
И методами:
1.5 Проявлять ласку
2.Дикое животное со следующими свойствами:
2.1 Место обитания
2.2 Дата нахождения
Реализовать классы следующих животных, реализующих интерфейсы домашнего животного или дикого животного
(надеюсь сами поймёте какое животное домашнее, а какое - дикое):
1.Кот со свойством:
1.1 Наличие шерсти(доступным только для чтения внешним классам)
2.1 Тигр
3.Собака со свойством:
3.1 Наличие дрессировки(доступным только для чтения внешним классам)
и методом:
3.2 Дрессировать
4.Волк со свойством:
4.1 Вожак стаи(доступным только для чтения внешним классам)
Так же реализовать абстрактный класс "Птица", реализующий интерфейс животное, у которого будет защищённое поле:
1.Высота полёта
и метод:
2. Летать, выводящий на экран фразу "Я лечу на x метрах, где x - высота полёта
и защищённый конструктор:
3.Конструктор принемающий высоту полёта
И следующие классы-наследники:
1.Курица
2.Аист
Для всех классов реализовать методы издавать звук, чтобы он печатал на консоль звук, примерно похожий на звук,
 который издаёт животное в реальном мире, а метод напечатать информацию, печатающий на экран все свойства,
 которые есть у данного животного. Так же для всех классов реализовать набор конструкторов,
 которые необходимы для задания всех свойств объекта, которые они у него есть.
Так же реализовать класс "Зоопарк", в котором будет храниться любая структура данных животных(массив, стек, очередь),
в котором организовать приватный массив объектов-животных со следующими методами:
1.Добавить животное в зоопарк(добавляет новое животное в структуру данных, для массива использовать следующий алгоритм
https://gospodaretsva.com/urok-27-vstavka-elementov-v-massiv.html , для стека и очереди вы алгоритмы уже знаете)
2.Убирает животное с номером i из зоопарка(Использовать этот алгоритм
https://gospodaretsva.com/urok-26-udalenie-elementa-iz-odnomernogo-massiva.html
для удаления из массива, для удаления из стека и очереди вы алгоритмы знаете)
3.Посмотреть информацию о животном с номером i
4.Заставить животное с номером i издать звук
5.Напечатать информацию о животных, которые есть на данный момент в зоопарке
6.Заставить всех животных, которые на данный момент есть в зоопарке, издать звук
Предоставить пользователю консольный интерфейс(консольное меню),
который позволяет пользователю добавлять новых животных в зоопарк, убирать животных из зоопарка,
печатать информацию о конкретном животном(вводя его номер),
печатать информацию о всех животных в зоопарке на данный момент,
заставлять животное издавать звук(введя номер животное),
заставлять издавать звук всех животных, которые на данный момент есть в зоопарке)
Сделать возможность у животных летать, если это животное птица, проявлять ласку,
если это домашнее животное и дрессировать, если это животное собака.
 */
public class Main {
    public static void main(String[] args) {
        Wolf wolf1 = new Wolf(2, 30, "blue",
                "Forests", LocalDate.of(2018, 1, 1), true);
        System.out.println(wolf1.info());
        wolf1.goHunting();
        wolf1.makeNoize();
        System.out.println();

        Chiken chicken1 = new Chiken(0.2, 1, "yellow");
        System.out.println(chicken1.info());
        System.out.println(chicken1.showAffection());
        chicken1.makeNoize();
        chicken1.fly();
        System.out.println();

        Stork stork1 = new Stork(0.6, 4, "Grey", 500);
        System.out.println(stork1.info());
        stork1.goHunting();
        stork1.fly();
        stork1.makeNoize();
        System.out.println();

        Dog dog1 = new Dog(0.8, 20, "Brown", "Graf", "Doberman", "Brown", true, LocalDate.of(2015, 1, 1), false);
        System.out.println(dog1.info());
        dog1.train();
        System.out.println(dog1.showAffection());
        dog1.makeNoize();
        System.out.println();

        Tiger tiger1 = new Tiger(1.5, 60, "Yellow", "Zoo", LocalDate.of(2010, 1, 1));
        System.out.println(tiger1.info());
        tiger1.train();
        tiger1.goHunting();
        System.out.println(tiger1.showAffection());
        tiger1.makeNoize();
        System.out.println();

        Cat cat1 = new Cat(0.2,1.2,"Green-Gray","Cassie","Canadian Sphynx","black",
                true,LocalDate.of(2008,1,1),false);
        System.out.println(cat1.info());
        cat1.train();
        System.out.println(cat1.showAffection());
        cat1.makeNoize();
        System.out.println();
    }


}
